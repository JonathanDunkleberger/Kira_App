generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @unique
  email          String          @unique
  tier           String          @default("free")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  usage          Usage[]
  conversations  Conversation[]
  subscriptions  Subscription[]
  paymentEvents  PaymentEvent[]
}

model Usage {
  id        String   @id @default(cuid())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  seconds   Int
  date      DateTime @default(now())
  ip        String?
}

model Conversation {
  id        String    @id @default(cuid())
  userId    String? // optional for guests
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  isGuest   Boolean   @default(true)
  messages  Message[]
  feedbacks Feedback[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  role           String
  text           String
  createdAt      DateTime     @default(now())
}

model Feedback {
  id             String        @id @default(cuid())
  stars          Int
  note           String?
  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: SetNull)
  userId         String?
  createdAt      DateTime      @default(now())
}

model Subscription {
  id               String     @id @default(cuid())
  userId           String
  user             User       @relation(fields: [userId], references: [id])
  stripeCustomer   String?    @unique
  stripeSubId      String?    @unique
  status           String     @default("inactive")
  plan             String     @default("pro")
  currentPeriodEnd DateTime?
  cancelAt         DateTime?
  canceledAt       DateTime?
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  @@index([userId])
  @@map("app_subscriptions")
}

model PaymentEvent {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  stripeId    String   @unique
  type        String
  status      String?
  amountCents Int?
  currency    String?  @default("usd")
  raw         Json
  createdAt   DateTime @default(now())

  @@index([userId, createdAt])
  @@map("app_payment_events")
}
